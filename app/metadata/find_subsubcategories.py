
from utils.csv_saver import make_df_list
from utils.get_driver import get_driver
from selenium.webdriver.common.by import By
subsub = [('Shop By Concern', 3632, 'Skin'), ('Face', 3630, 'Skin'), ('Body', 1284, 'Skin'), ('K- Beauty', 998, 'Skin'), ('Sun Care', 270, 'Skin'), ('LIP BALMS/LIP CARE', 174, 'Skin'), ('Eye Care', 155, 'Skin'), ('Hand & Feet', 121, 'Skin'), ('Haircare', 1, 'Skin'), ('FACE', 1858, 'Personal care'), ('Body', 1322, 'Personal care'), ('Bath & Shower', 626, 'Personal care'), ('Feminine Hygiene', 332, 'Personal care'), ('Oral Care', 271, 'Personal care'), ('Hands & Feet', 229, 'Personal care'), ('Wellness', 191, 'Personal care'), ('HOME CARE', 175, 'Personal care'), ('Tools & Accessories', 69, 'Personal care'), ('Feminine Care', 51, 'Personal care'), ('Face', 1496, 'Makeup'), ('Lips', 1257, 'Makeup'), ('Eyes', 994, 'Makeup'), ('Nails', 628, 'Makeup'), ('Tools & Brushes', 239, 'Makeup'), ('Top Brands', 239, 'Makeup'), ('Makeup Kits', 14, 'Makeup'), ('Face', 1496, 'Face'), ('Foundation', 335, 'Face'), ('Compact & Pressed Powder', 234, 'Face'), ('Makeup Remover', 178, 'Face'), ('Concealer', 174, 'Face'), ('Blush', 145, 'Face'), ('Highlighters', 135, 'Face'), ('Face Primer', 93, 'Face'), ('BB & CC cream', 70, 'Face'), ('Loose Powder', 61, 'Face'), ('Contour', 49, 'Face'), ('Setting Spray', 48, 'Face'), ('Bronzer', 30, 'Face'), ('Face Pallete', 19, 'Face'), ('Tinted Moisturizer', 10, 'Face'), ('Lips', 1257, 'Face'), ('Eyes', 994, 'Face'), ('Nails', 628, 'Face'), ('Tools & Brushes', 239, 'Face'), ('Top Brands', 239, 'Face'), ('Makeup Kits', 14, 'Face'), ('Face', 1496, 'Lips'), ('Lips', 1257, 'Lips'), ('Lipstick', 487, 'Lips'), ('Liquid Lipsticks', 408, 'Lips'), ('Lip Balm', 160, 'Lips'), ('Lip Liner', 134, 'Lips'), ('Lip Gloss', 82, 'Lips'), ('Lip Crayon', 11, 'Lips'), ('Lip Exfoliator', 11, 'Lips'), ('Lip Plumper', 9, 'Lips'), ('Eyes', 994, 'Lips'), ('Nails', 628, 'Lips'), ('Tools & Brushes', 239, 'Lips'), ('Top Brands', 239, 'Lips'), ('Makeup Kits', 14, 'Lips'), ('Face', 1496, 'Eyes'), ('Lips', 1257, 'Eyes'), ('Eyes', 994, 'Eyes'), ('Eye Shadow', 285, 'Eyes'), ('Eyeliner', 223, 'Eyes'), ('Mascara', 146, 'Eyes'), ('Eye Brow Enhancers', 103, 'Eyes'), ('False Eyelashes', 79, 'Eyes'), ('Kajal', 68, 'Eyes'), ('Eye Makeup Remover', 62, 'Eyes'), ('Under Eye Concealer', 38, 'Eyes'), ('Eye Primer', 8, 'Eyes'), ('Nails', 628, 'Eyes'), ('Tools & Brushes', 239, 'Eyes'), ('Top Brands', 239, 'Eyes'), ('Makeup Kits', 14, 'Eyes'), ('Face', 1496, 'Nails'), ('Lips', 1257, 'Nails'), ('Eyes', 994, 'Nails'), ('Nails', 628, 'Nails'), ('Nail Polish', 589, 'Nails'), ('Nail Art Kits', 18, 'Nails'), ('Manicure & Pedicure Kits', 16, 'Nails'), ('Nail Polish Remover', 9, 'Nails'), ('Nail Care', 7, 'Nails'), ('Tools & Brushes', 239, 'Nails'), ('Top Brands', 239, 'Nails'), ('Makeup Kits', 14, 'Nails'), ('Face', 1496, 'Tools & Brushes'), ('Lips', 1257, 'Tools & Brushes'), ('Eyes', 994, 'Tools & Brushes'), ('Nails', 628, 'Tools & Brushes'), ('Tools & Brushes', 239, 'Tools & Brushes'), ('Sponges & Applicators', 77, 'Tools & Brushes'), ('Face Brush', 54, 'Tools & Brushes'), ('Eye Brush', 37, 'Tools & Brushes'), ('Brush Sets', 25, 'Tools & Brushes'), ('Mirrors', 15, 'Tools & Brushes'), ('Eyelash Curlers', 6, 'Tools & Brushes'), ('Blush Brush', 5, 'Tools & Brushes'), ('Tweezers', 4, 'Tools & Brushes'), ('Lip Brush', 2, 'Tools & Brushes'), ('Sharpeners', 1, 'Tools & Brushes'), ('Top Brands', 239, 'Tools & Brushes'), ('Makeup Kits', 14, 'Tools & Brushes'), ('Face', 1496, 'Top Brands'), ('Lips', 1257, 'Top Brands'), ('Eyes', 994, 'Top Brands'), ('Nails', 628, 'Top Brands'), ('Tools & Brushes', 239, 'Top Brands'), ('Top Brands', 239, 'Top Brands'), ('Revlon', 176, 'Top Brands'), ('Maybelline', 41, 'Top Brands'), ('The Body Shop', 7, 'Top Brands'), ('MAC', 5, 'Top Brands'), ("L'Oreal", 4, 'Top Brands'), ('Garnier', 3, 'Top Brands'), ('Rimmel', 2, 'Top Brands'), ('Bioderma', 1, 'Top Brands'), ('Makeup Kits', 14, 'Top Brands'), ('Face', 1496, 'Makeup Kits'), ('Lips', 1257, 'Makeup Kits'), ('Eyes', 994, 'Makeup Kits'), ('Nails', 628, 'Makeup Kits'), ('Tools & Brushes', 239, 'Makeup Kits'), ('Top Brands', 239, 'Makeup Kits'), ('Makeup Kits', 14, 'Makeup Kits'), ('Moisturizer', 852, 'Natural'), ('Facewash', 645, 'Natural'), ('Masks & Peels', 488, 'Natural'), ('Hair Oil', 434, 'Natural'), ('Cleansing oil/cleanser', 409, 'Natural'), ('Serums', 401, 'Natural'), ('Shower Gels & Body Wash', 259, 'Natural'), ('Shampoo & Conditioner', 236, 'Natural'), ('Sheet Mask', 194, 'Natural'), ('Scrubs & Exfoliators', 193, 'Natural'), ('Hair Mask', 189, 'Natural'), ('Toners & Astringents', 177, 'Natural'), ('Body Butter', 54, 'Natural'), ('Sleeping Mask', 54, 'Natural'), ('Essence', 41, 'Natural'), ('Hair Care', 1939, 'Hair'), ('SHOP BY CONCERN', 1091, 'Hair'), ('Hair styling', 263, 'Hair'), ('Tools & Accessories', 156, 'Hair'), ('SHOP BY HAIR TYPE', 32, 'Hair'), ('Fragrances', 673, 'Men'), ('Top Brands', 322, 'Men'), ('Hair Care', 320, 'Men'), ('Shaving', 217, 'Men'), ('Skin Care', 163, 'Men'), ('Bath & Body', 124, 'Men'), ('Shop By Concern', 103, 'Men'), ('Perfumes (EDT/EDP)', 296, 'Fragrance'), ('Body Mist/Spray', 285, 'Fragrance'), ('High-end Perfume', 196, 'Fragrance'), ('Deodorants/Roll-Ons', 194, 'Fragrance'), ('Bra', 129, 'lingerie'), ('Panty', 38, 'lingerie'), ('Leggings', 20, 'Clothing & More'), ('Trouser', 7, 'Clothing & More')]
categories = ['Skin', 'Personal care', 'Makeup', 'Face', 'Lips', 'Eyes', 'Nails', 'Tools & Brushes', 'Top Brands', 'Makeup Kits', 'Natural', 'Hair', 'Men', 'Fragrance', 'lingerie', 'Clothing & More']
categories_url = ['-'.join(cat.lower().split(' ')) for cat in categories]
def find_subsubcategories():
    with get_driver() as driver:
        result = list()
        for child, _, parent in subsub:
            url = f"https://shop.shajgoj.com/product-category/makeup/#q=&hPP=21&idx=wp_posts_product&p=0&hFR%5Btaxonomies_hierarchical.product_cat.lvl0%5D%5B0%5D={parent}%20%3E%20{child}&is_v=1"
            driver.get(url)
            driver.implicitly_wait(4)
            try:
                elems = driver.find_elements(By.CSS_SELECTOR, '.ais-hierarchical-menu--list__lvl2')
            except:
                continue
            for elem in elems:
                q = elem.text.split('\n')
                while q:
                    f, s= q.pop(0), q.pop(0)
                    s = int("".join([c for c in s if c != ',']))
                    result.append((f, s, child))
    make_df_list('subsubcategories', result, ['SubSubCategory', 'Count', 'Parent'])
    print(result)